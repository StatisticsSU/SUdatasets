use_data(doctorvisits, overwrite = T)
head(doctorvisits)
devtools::document()
install.packages("roxygen2")
install.packages("roxygen2")
library(roxygen2)
library(devtools)
use_data(doctorvisits)
use_data(doctorvisits, overwrite = T)
devtools::document()
?doctorvisits
?doctorvisits
devtools::build()
devtools::document()
?doctorvisits
library(SUdatasets)
?doctorvisits
SUdatasets::doctorvisits
?doctorvisits
hist(doctorvisits$numvisit)
hist(doctorvisits$numvisit, 50)
hist(doctorvisits$numvisit[1:200,], 50)
hist(doctorvisits$numvisit[1:200], 50)
hist(doctorvisits$numvisit[1:200], 50)
devtools::install()
devtools::document()
?doctorvisits
devtools::document()
?doctorvisits
devtools::install('')
devtools::install()
devtools::document()
?doctorvisits
?rnbinom
dnbinom(x, size = 1.4, mu = 3)
dnbinom(3, size = 1.4, mu = 3)
rnbinom(1000, size = 1.4, mu = 3)
mean(rnbinom(1000, size = 1.4, mu = 3))
var(rnbinom(1000, size = 1.4, mu = 3))
3*(1+3/1.4)
rnbinom(100, size = 2, mu = 3)
x = rnbinom(100, size = 2, mu = 3)
mean(c)
mean(x)
var(z)
var(z)
x
var(x)
hist(x)
x = rnbinom(100, size = 2, mu = 3);mean(x)
x = rnbinom(100, size = 2, mu = 3);c(mean(x),var(x))
x = rnbinom(100000, size = 2, mu = 3);c(mean(x),var(x))
x = rnbinom(100000, size = 2, mu = 3);c(mean(x),var(x))
x = rnbinom(1000000, size = 2, mu = 3);c(mean(x),var(x))
x = rnbinom(1000000, size = 0.5, mu = 3);c(mean(x),var(x))
x = rnbinom(1000000, size = 0.5, mu = 3);c(mean(x),var(x))
x = rnbinom(1000000, size = 0.5, mu = 3);c(mean(x),var(x))
x = rnbinom(1000000, size = 1.5, mu = 3);c(mean(x),var(x))
x = rnbinom(100, size = 2, mu = 3);c(mean(x),var(x))
hist(x)
table(x)
table(doctorvisits$numvisit)
r = 1.5
mu = 2
dnbinom(x, size = r, mu)
r = 1.5
mu = 2
dnbinom(1, size = r, mu)
r = 2
mu = 2
dnbinom(1, size = r, mu)
dnbinom(1, size = r, mu)
dnbinom(3, size = 10, 2)
?dnbinom
dnbinom(x, size = 1, prob = 1/2)
dnbinom(2, size = 1, prob = 1/2)
dnbinom(2, size = 1, prob = 1/2, mean = 2)
r = 2
mu = 2
dnbinom(1, size = r, mean = mu)
r = 2
mu = 2
dnbinom(1, size = r, mu = mu)
dnbinom(3, 2, 4)
dnbinom(1, size = 2, mu = 2)
doctorvisits
library(remotes)
install_github('StatisticsSU/SUdatasets')
visits <- doctorvisits
library(remotes)
install_github('StatisticsSU/SUdatasets')
library(SUdatasets)
visits <- doctorvisits
#library(remotes)
#install_github('StatisticsSU/SUdatasets')
library(SUdatasets)
visits <- doctorvisits
visits
#library(remotes)
#install_github('StatisticsSU/SUdatasets')
library(SUdatasets)
visits <- doctorvisits$numvisit
#library(remotes)
#install_github('StatisticsSU/SUdatasets')
library(SUdatasets)
visits <- doctorvisits$numvisit
lambdaML = mean(visits)
#library(remotes)
#install_github('StatisticsSU/SUdatasets')
library(SUdatasets)
visits <- doctorvisits$numvisit
n = length(visits)
lambdaHat = mean(visits)
SElambdaHat = sqrt(lambdaHat/n)
#library(remotes)
#install_github('StatisticsSU/SUdatasets')
library(SUdatasets)
visits <- doctorvisits$numvisit
n = length(visits)
lambdaHat = mean(visits)
SElambdaHat = sqrt(lambdaHat/n)
c(lambdaHat - 1.96*SElambdaHat, lambdaHat + 1.96*SElambdaHat)
#| code-fold: true
#| code-summary: "Visa mig koden!"
x_grid = seq(0, 30, by = 1)
dens_pois = dpois(x_grid, lambda = lambdaHat)
# Plotting - a lot of code because I want pretty colors and legends. Sorry.
hist(visits, breaks = 50, freq = F, xlim = c(-10,10),
xlab = "x", ylab = "f(x)", col = "cornflowerblue")
lines(x_grid, dens_pois, lwd = 3, col = "orange")
legend("topleft", inset=.01,
legend=c("histogram data", "density function"),
col=c("cornflowerblue", "orange"),
lty = c(NA, 1),
lwd = c(NA, 2),
border = c(1,0),
cex=1
)
#| code-fold: true
#| code-summary: "Visa mig koden!"
x_grid = seq(0, 30, by = 1)
dens_pois = dpois(x_grid, lambda = lambdaHat)
# Plotting - a lot of code because I want pretty colors and legends. Sorry.
hist(visits, breaks = 50, freq = F, xlab = "x", ylab = "f(x)",
col = "cornflowerblue")
lines(x_grid, dens_pois, lwd = 3, col = "orange")
legend("topleft", inset=.01,
legend=c("histogram data", "density function"),
col=c("cornflowerblue", "orange"),
lty = c(NA, 1),
lwd = c(NA, 2),
border = c(1,0),
cex=1
)
#| code-fold: true
#| code-summary: "Visa mig koden!"
x_grid = seq(0, 30, by = 1)
dens_pois = dpois(x_grid, lambda = lambdaHat)
# Plotting - a lot of code because I want pretty colors and legends. Sorry.
hist(visits, breaks = 50, freq = F, xlab = "x", ylab = "f(x)",
col = "cornflowerblue")
lines(x_grid, dens_pois, lwd = 3, col = "orange")
legend("topleft", inset=.01,
legend=c("histogram data", "density function"),
col=c("cornflowerblue", "orange"),
lty = c(NA, 1),
lwd = c(NA, 2),
border = c(1,0),
fill = c("cornflowerblue", NA),
cex=1
)
#| code-fold: true
#| code-summary: "Visa mig koden!"
x_grid = seq(0, 30, by = 1)
dens_pois = dpois(x_grid, lambda = lambdaHat)
# Plotting - a lot of code because I want pretty colors and legends. Sorry.
hist(visits, breaks = 50, freq = F, xlab = "x", ylab = "f(x)",
col = "cornflowerblue")
lines(x_grid, dens_pois, lwd = 3, col = "orange")
legend("topright", inset=.01,
legend=c("histogram data", "density function"),
col=c("cornflowerblue", "orange"),
lty = c(NA, 1),
lwd = c(NA, 2),
border = c(1,0),
fill = c("cornflowerblue", NA),
cex=1
)
#| code-fold: true
#| code-summary: "Visa mig koden!"
x_grid = seq(0, 30, by = 1)
dens_pois = dpois(x_grid, lambda = lambdaHat)
# Plotting - a lot of code because I want pretty colors and legends. Sorry.
hist(visits, breaks = 50, freq = F, xlab = "x", ylab = "f(x)",
col = "cornflowerblue")
lines(x_grid, dens_pois, lwd = 3, col = "orange")
legend("topright", inset=.01,
legend=c("data", "fitted poisson"),
col=c("cornflowerblue", "orange"),
lty = c(NA, 1),
lwd = c(NA, 2),
border = c(1,0),
fill = c("cornflowerblue", NA),
cex=1
)
#library(remotes)
#install_github('StatisticsSU/SUdatasets')
library(SUdatasets)
visits <- doctorvisits$numvisit[doctorvisits$numvisit <=9]
n = length(visits)
lambdaHat = mean(visits)
SElambdaHat = sqrt(lambdaHat/n)
c(lambdaHat - 1.96*SElambdaHat, lambdaHat + 1.96*SElambdaHat)
#| code-fold: true
#| code-summary: "Visa mig koden!"
x_grid = seq(0, 30, by = 1)
dens_pois = dpois(x_grid, lambda = lambdaHat)
# Plotting - a lot of code because I want pretty colors and legends. Sorry.
hist(visits, breaks = 50, freq = F, xlab = "x", ylab = "f(x)",
col = "cornflowerblue")
lines(x_grid, dens_pois, lwd = 3, col = "orange")
legend("topright", inset=.01,
legend=c("data", "fitted poisson"),
col=c("cornflowerblue", "orange"),
lty = c(NA, 1),
lwd = c(NA, 2),
border = c(1,0),
fill = c("cornflowerblue", NA),
cex=1
)
dens_pois
#library(remotes)
#install_github('StatisticsSU/SUdatasets')
library(SUdatasets)
visits <- doctorvisits$numvisit[doctorvisits$numvisit <=9]
n = length(visits)
lambdaHat = mean(visits)
SElambdaHat = sqrt(lambdaHat/n)
c(lambdaHat - 1.96*SElambdaHat, lambdaHat + 1.96*SElambdaHat)
#| code-fold: true
#| code-summary: "Visa mig koden!"
x_grid = seq(0, 30, by = 1)
dens_pois = dpois(x_grid, lambda = lambdaHat)
# Plotting - a lot of code because I want pretty colors and legends. Sorry.
hist(visits, breaks = 50, freq = F, xlab = "x", ylab = "f(x)",
col = "cornflowerblue")
lines(x_grid, dens_pois, lwd = 3, col = "orange")
legend("topright", inset=.01,
legend=c("data", "fitted poisson"),
col=c("cornflowerblue", "orange"),
lty = c(NA, 1),
lwd = c(NA, 2),
border = c(1,0),
fill = c("cornflowerblue", NA),
cex=1
)
dens_pois
sum(dens_pois)
#| code-fold: true
#| code-summary: "Visa mig koden!"
x_grid = seq(0, 30, by = 1)
dens_pois = dpois(x_grid, lambda = lambdaHat)
# Plotting - a lot of code because I want pretty colors and legends. Sorry.
barplot(table(visits), col = "cornflowerblue", freq = F, xlab = "x", ylab = "f(x)")
lines(x_grid, dens_pois, lwd = 3, col = "orange")
legend("topright", inset=.01,
legend=c("data", "fitted poisson"),
col=c("cornflowerblue", "orange"),
lty = c(NA, 1),
lwd = c(NA, 2),
border = c(1,0),
fill = c("cornflowerblue", NA),
cex=1
)
#| code-fold: true
#| code-summary: "Visa mig koden!"
x_grid = seq(0, 30, by = 1)
dens_pois = dpois(x_grid, lambda = lambdaHat)
# Plotting - a lot of code because I want pretty colors and legends. Sorry.
barplot(prop.table(table(visits)), col = "cornflowerblue", xlab = "x", ylab = "f(x)")
lines(x_grid, dens_pois, lwd = 3, col = "orange")
legend("topright", inset=.01,
legend=c("data", "fitted poisson"),
col=c("cornflowerblue", "orange"),
lty = c(NA, 1),
lwd = c(NA, 2),
border = c(1,0),
fill = c("cornflowerblue", NA),
cex=1
)
#| code-fold: true
#| code-summary: "Visa mig koden!"
x_grid = seq(0, 30, by = 1)
dens_pois = dpois(x_grid, lambda = lambdaHat)
# Plotting - a lot of code because I want pretty colors and legends. Sorry.
barplot(prop.table(table(visits)), col = "cornflowerblue", xlab = "x", ylab = "f(x)")
lines(x_grid, dens_pois, lwd = 3, col = "orange", type = "o")
legend("topright", inset=.01,
legend=c("data", "fitted poisson"),
col=c("cornflowerblue", "orange"),
lty = c(NA, 1),
lwd = c(NA, 2),
border = c(1,0),
fill = c("cornflowerblue", NA),
cex=1
)
#| code-fold: true
#| code-summary: "Visa mig koden!"
x_grid = seq(0, 30, by = 1)
dens_pois = dpois(x_grid, lambda = lambdaHat)
# Plotting - a lot of code because I want pretty colors and legends. Sorry.
plot(prop.table(table(visits)), col = "cornflowerblue", xlab = "x", ylab = "f(x)")
lines(x_grid, dens_pois, lwd = 3, col = "orange", type = "o")
legend("topright", inset=.01,
legend=c("data", "fitted poisson"),
col=c("cornflowerblue", "orange"),
lty = c(NA, 1),
lwd = c(NA, 2),
border = c(1,0),
fill = c("cornflowerblue", NA),
cex=1
)
#| code-fold: true
#| code-summary: "Visa mig koden!"
x_grid = seq(0, 30, by = 1)
dens_pois = dpois(x_grid, lambda = lambdaHat)
# Plotting - a lot of code because I want pretty colors and legends. Sorry.
plot(prop.table(table(visits)), col = "cornflowerblue", xlab = "x", ylab = "f(x)", lwd = 3)
lines(x_grid, dens_pois, lwd = 3, col = "orange", type = "o")
legend("topright", inset=.01,
legend=c("data", "fitted poisson"),
col=c("cornflowerblue", "orange"),
lty = c(NA, 1),
lwd = c(NA, 2),
border = c(1,0),
fill = c("cornflowerblue", NA),
cex=1
)
loglik_nb <- function(param, x){
r = param[1]
mu = param[2]
return(sum(dnbinom(x, size = r, mu = mu, log = TRUE)))
}
loglik_nb <- function(param, x){
r = param[1]
mu = param[2]
return(sum(dnbinom(x, size = r, mu = mu, log = TRUE)))
}
loglik_nb(c(1,3), visits)
initVal = c(2,5)
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("BFGS"), control=list(fnscale=-1), hessian=TRUE)
loglik_nb <- function(param, x){
r = exp(param[1])
mu = exp(param[2])
return(sum(dnbinom(x, size = r, mu = mu, log = TRUE)))
}
initVal = c(2,5)
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("BFGS"), control=list(fnscale=-1), hessian=TRUE)
initVal = c(10,10)
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("BFGS"), control=list(fnscale=-1), hessian=TRUE)
initVal = c(10,10)
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("BFGS"), control=list(fnscale=-1), hessian=TRUE)
initVal = c(log(10),log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("BFGS"), control=list(fnscale=-1), hessian=TRUE)
loglik_nb <- function(param, x){
r = exp(param[1])
mu = exp(param[2])
return(sum(dnbinom(x, size = r, mu = mu, log = TRUE)))
}
loglik_nb(c(10,10), visits)
loglik_nb <- function(param, x){
r = exp(param[1])
mu = exp(param[2])
return(sum(dnbinom(x, size = r, mu = mu, log = TRUE)))
}
loglik_nb(c(1,10), visits)
loglik_nb <- function(param, x){
r = exp(param[1])
mu = exp(param[2])
return(sum(dnbinom(x, size = r, mu = mu, log = TRUE)))
}
loglik_nb(c(0.1,10), visits)
loglik_nb <- function(param, x){
r = exp(param[1])
mu = exp(param[2])
return(sum(dnbinom(x, size = r, mu = mu, log = TRUE)))
}
loglik_nb(c(0.1,0.1), visits)
initVal = c(log(10),log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("BFGS"), control=list(fnscale=-1), hessian=TRUE)
initVal = c(log(10),log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("BFGS"), control=list(fnscale=-1), hessian=TRUE)
initVal = c(log(10),log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("BFGS"), control=list(fnscale=-1), hessian=TRUE)
?optim
loglik_nb <- function(param, x){
r = param[1]
mu = param[2]
return(sum(dnbinom(x, size = r, mu = mu, log = TRUE)))
}
loglik_nb(c(0.1,0.1), visits)
initVal = c(log(10), log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("BFGS"), lower = c(0,0), control=list(fnscale=-1), hessian=TRUE)
initVal = c(log(10), log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("L-BFGS-B"), lower = c(0,0), control=list(fnscale=-1), hessian=TRUE)
initVal = c(log(10), log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("L-BFGS-B"), lower = c(0,0), control=list(fnscale=-1), hessian=TRUE)
OptimResults
visitFake = rnbinom(1000, size = 1, mu = 2)
initVal = c(log(10), log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, x, method=c("L-BFGS-B"), lower = c(0,0), control=list(fnscale=-1), hessian=TRUE)
visitFake = rnbinom(1000, size = 1, mu = 2)
initVal = c(log(10), log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visitFake, method=c("L-BFGS-B"), lower = c(0,0), control=list(fnscale=-1), hessian=TRUE)
OptimResults
initVal = c(log(10), log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("L-BFGS-B"), lower = c(0,0), control=list(fnscale=-1), hessian=TRUE)
OptimResults
initVal = c(log(10), log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("L-BFGS-B"), lower = c(0,0), control=list(fnscale=-1), hessian=TRUE)
OptimResults$par
OptimResults$hessian
initVal = c(log(10), log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("L-BFGS-B"), lower = c(0,0), control=list(fnscale=-1), hessian=TRUE)
OptimResults$par
-solve(OptimResults$hessian)
initVal = c(log(10), log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("L-BFGS-B"), lower = c(0,0), control=list(fnscale=-1), hessian=TRUE)
OptimResults$par
J = OptimResults$hessian
-solve(J)
initVal = c(log(10), log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("L-BFGS-B"), lower = c(0,0), control=list(fnscale=-1), hessian=TRUE)
rHat = OptimResults$par[1]
muHat = OptimResults$par[2]
J = OptimResults$hessian
-solve(J)
?dnbinom
#| code-fold: true
#| code-summary: "Visa mig koden!"
x_grid = seq(0, 30, by = 1)
dens_pois = dpois(x_grid, lambda = lambdaHat)
dens_nb = dnbinom(x_grid, size = rHat, mu = muHat)
# Plotting - a lot of code because I want pretty colors and legends. Sorry.
plot(prop.table(table(visits)), col = "cornflowerblue", xlab = "x", ylab = "f(x)", lwd = 3)
lines(x_grid, dens_pois, lwd = 3, col = "orange", type = "o")
lines(x_grid, dens_nb, lwd = 3, col = "indianred", type = "o")
legend("topright", inset=.01,
legend=c("data", "fitted poisson"),
col=c("cornflowerblue", "orange", "indianred"),
lty = c(NA, 1, 1),
lwd = c(NA, 2, 2),
border = c(1,0,0),
fill = c("cornflowerblue", NA, NA),
cex=1
)
initVal = c(log(10), log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("L-BFGS-B"), lower = c(0,0), control=list(fnscale=-1), hessian=TRUE)
rHat = OptimResults$par[1]
muHat = OptimResults$par[2]
J = OptimResults$hessian
-solve(J)
initVal = c(log(10), log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("L-BFGS-B"), lower = c(0,0), control=list(fnscale=-1), hessian=TRUE)
rHat = OptimResults$par[1]
muHat = OptimResults$par[2]
J = OptimResults$hessian
-solve(J)
initVal = c(log(10), log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("L-BFGS-B"), lower = c(0,0), control=list(fnscale=-1), hessian=TRUE)
rHat = OptimResults$par[1]
muHat = OptimResults$par[2]
J = OptimResults$hessian
-solve(J)
initVal = c(log(10), log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("L-BFGS-B"), lower = c(0,0), control=list(fnscale=-1), hessian=TRUE)
rHat = OptimResults$par[1]
muHat = OptimResults$par[2]
J = OptimResults$hessian
-solve(J)
initVal = c(log(10), log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("L-BFGS-B"), lower = c(0,0), control=list(fnscale=-1), hessian=TRUE)
rHat = OptimResults$par[1]
muHat = OptimResults$par[2]
J = OptimResults$hessian
-solve(J)
initVal = c(log(10), log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("L-BFGS-B"), lower = c(0,0), control=list(fnscale=-1), hessian=TRUE)
rHat = OptimResults$par[1]
muHat = OptimResults$par[2]
J = OptimResults$hessian
-solve(J)
initVal = c(log(10), log(10))
OptimResults <- optim(initVal, loglik_nb, gr=NULL, visits, method=c("L-BFGS-B"), lower = c(0,0), control=list(fnscale=-1), hessian=TRUE)
rHat = OptimResults$par[1]
muHat = OptimResults$par[2]
J = OptimResults$hessian
-solve(J)
thetaDraws[1:5,]
library(remotes)
install_github("StatisticsSU/sda123")
library(sda123)
?reg_residuals
devtools::document()
devtools::build()
devtools::build()
library(SUdatasets)
SUdatasets::energySweden
?energySweden
remove.packages("SUdatasets")
library(SUdatasets'')
library(SUdatasets)
